Create or replace Function general_price()
 returns int 
 AS 
 $$
 declare
Q_general_price int;
 Begin 
 	Select sum(price)into Q_general_price from Tickets;
 	return Q_general_price;
 end;
 	$$ LANGUAGE plpgsql;	
select general_price();
select *from Tickets;

Create or replace PROCEDURE plane_info(id_plan int)
AS
$$
	declare 
		planes Flights%ROWTYPE;
	Begin 
	select*
	into planes 
	from Planes
	where id_planes = id_plan;
end;
	$$ LANGUAGE plpgsql;	
call plane_info(2);


Create or replace PROCEDURE DELETECAR
(
	car_id int
) LANGUAGE plpgsql AS
$$
Begin
Delete from car where id_car = car_id;
end
$$;
call DELETECAR(2);
select*from car;


create or replace function count_car() returns trigger as $$
begin
 return sum(price) from car;
end;
$$ language plpgsql;

drop trigger if exists count_carrv on car;
create trigger count_carr before insert or update on car
 for each row execute procedure count_car();
 CREATE TRIGGER check_update
    BEFORE INSERT ON car
    FOR EACH ROW
    EXECUTE PROCEDURE count_car();


create or replace function total()
returns trigger
as $body$
declare
totala int;
begin
totala = new.id_car * new.price;
new.KPP = totala;
return new;
end;
$body$ language plpgsql;

create trigger calr
before insert 
on car
for each row
execute procedure total();	

insert into car(brand_car,kod_manufactures,date_of_manufacture,price) values ('Volkswagen','1','2005.05.30','33');
select*from car;
select *from user_orend  where id_user=11;


insert into sales(kod_shopper,id_car,date_of_sale,purchase_amount) values ('6','1','2003.03.03','5000'),('7','2','2003.04.04','4000'),('8','5','2003.01.04','6000');
insert into car(brand_car,kod_manufactures,date_of_manufacture) values ('Volkswagen','1','2005.05.30'),('Audi','1','2007.11.11'),('Merz','1','2012.03.03'),('Volkswagen','1','2005.05.30'),('Volkswagen','1','2005.05.30'),('Volkswagen','1','2005.05.30'),('Volkswagen','1','2005.05.30'),('Volkswagen','1','2003.03.03');
insert into shopper(last_name, forename, fist_mame,address) Values ('Мадяр','Олександр','Анатолійович','Чернівці'),('Зайцев','Артем','Олегович','Харків');


alter table car add column last_update timestamp;
create or replace function last_time() returns trigger as $$
begin
new.last_update = now();
 return new;
end
$$ language plpgsql;
drop trigger if exists last_time on car;
create trigger user_update_time before insert or update on car
 for each row execute procedure last_time ();
select * from car;
 update car set brand_car = 4 where id_car=1;
 select * from car where id_car=1;  
select*from car;


CREATE TABLE "CARS"
(
"brand_car" VARCHAR(20) NOT NULL,
"model" VARCHAR(20) NOT NULL,
"date_of_manufacture" VARCHAR(20) NOT NULL,
"UserName" VARCHAR(20) NOT NULL,
"EmpAdditionTime" VARCHAR(20) NOT NULL);
--drop table "CARS";
CREATE OR REPLACE FUNCTION car_insert_trigger_fnc()
  RETURNS trigger AS
$$
BEGIN
    INSERT INTO "CARS" (  "brand_car", "model","date_of_manufacture","UserName" ,"EmpAdditionTime")
       VALUES(NEW."brand_car",NEW."model",NEW."date_of_manufacture",current_user,current_date);
RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';
drop trigger if exists cars_insert_trigger on car;
CREATE TRIGGER cars_insert_trigger
  AFTER INSERT
  ON car
  FOR EACH ROW
  EXECUTE PROCEDURE car_insert_trigger_fnc();
insert into car(brand_car,model,date_of_manufacture) values ('Volkswagen','1','2005.05.30');
select *from "CARS";


create table if not exists carss ( id_car int generated always as identity primary key,
				   brand_car varchar(44),
                   model varchar(44),
                   kod_manufactures int,
                   color varchar(44),
                   date_of_manufacture date,
                   type_of_body int,
                   kind_of_fuel int,
                   KPP int,
                   type_of_drive int,
                  power varchar(15),
                   number_of_doors int,
                   number_of_seats int,
                   additionally varchar (99));
		  
CREATE OR REPLACE FUNCTION car_delete()
RETURNS trigger AS
$$
BEGIN
   INSERT INTO carss (brand_car, model, date_of_manufacture)  
   VALUES(OLD.brand_car, OLD.model, OLD.date_of_manufacture);  
return old;
END;
$$
LANGUAGE 'plpgsql';
--drop trigger if exists before_delete on car;
CREATE TRIGGER before_delete
before DELETE  
on car
EXECUTE PROCEDURE car_delete();
delete from car where id_car=10;
select *from carss;
